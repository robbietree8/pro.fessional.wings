## whether to enable WebSecurity.debug
wings.warlock.security.web-debug=false
## whether to use Role in AuthX.
wings.warlock.security.authority-role=true
## whether to use Perm in AuthX.
wings.warlock.security.authority-perm=true
## whether to enable anonymous
wings.warlock.security.anonymous=false

## true to forward in servlet, otherwise redirect(302)
wings.warlock.security.login-forward=true
## the redirect page when not login, need to have controller to handle.
wings.warlock.security.login-page=/auth/login-page.json

## loginProcessingUrl, the Ant style URL for processing login, handled by filter, no controller required.
## Support `authType` and `authZone` variables, which can be obtained via param or path (PathPattern)
wings.warlock.security.login-proc-url=/auth/{authType}/login.json
#wings.warlock.security.login-proc-url=/auth/{authType:[^-]+}{splitter:-?}{authZone:[^-]*}/login.json

## Spring is POST only to better follow RESTful, but Oauth has Get.
wings.warlock.security.login-proc-method=POST,GET

## logout url, handled by filter, no controller required.
wings.warlock.security.logout-url=/auth/logout.json

## whether to redirect after successful login.
wings.warlock.security.login-success-redirect=false
## redirect parameters if redirect after successful login.
wings.warlock.security.login-success-redirect-param=redirectTo
## default address if redirect after successful login.
wings.warlock.security.login-success-redirect-default=/

## the response body if no redirect after successful login.
wings.warlock.security.login-success-body={"success":true,"message":"login success"}
## the response body if login fail.
wings.warlock.security.login-failure-body={"success":false,"message":"{message}"}
## the response body after successful logout, no handler is injected when empty.
wings.warlock.security.logout-success-body={"success":true,"message":"logout success"}

## the response body after successful logout, no handler is injected when empty.
wings.warlock.security.session-maximum=-1
## the response body when session expired.
wings.warlock.security.session-expired-body={"success":false,"message":"session has been expired, possibly due to multiple logins"}

## username Parameter
wings.warlock.security.username-para=username
## password Parameter
wings.warlock.security.password-para=password

## GrantedAuthorityDefaults, suggest keeping the same with spring, do not edit.
wings.warlock.security.role-prefix=ROLE_

### BGN WingsWeb&Http
## The order of config is from loose to strict.
## `webIgnore` > `PermitAll` > `Authenticated` > `Authority` > `AnyRequest` at the end.
## if value is `-` or `empty`, means ignore this key.

## (1) ignored items, antMatcher, no need of SecurityFilter, such as static resources.
## https://github.com/spring-projects/spring-security/issues/10938
wings.warlock.security.web-ignore[assets]=/assets/**
wings.warlock.security.web-ignore[webjars]=/webjars/**
wings.warlock.security.web-ignore[swagger-ui]=/swagger-ui/**
wings.warlock.security.web-ignore[swagger-api]=/v3/api-docs/**

## (2) allow all, antMatcher.
wings.warlock.security.permit-all[error]=/error
wings.warlock.security.permit-all[auth]=/auth/**
wings.warlock.security.permit-all[oauth]=/oauth/**
wings.warlock.security.permit-all[api]=/api/**
wings.warlock.security.permit-all[test]=/test/**

## (3) authed only, antMatcher.
wings.warlock.security.authenticated[user]=/user/**

## (4) has authority, antMatcher.
## merge authority by URL grouping, and finally set the URL in reverse ASCII order,
## i.e., the English number comes before the `*`, and the loose rule comes after.
wings.warlock.security.authority[ROLE_ACTUATOR]=/actuator/**

## (5) defaults, `String`, support the followings.
## * `permitAll`|`authenticated`|`anonymous`|`fullyAuthenticated`
## * any non-empty, non-above string, considered as `Authority`, use `comma` or `blank` to separate multiple ones.
wings.warlock.security.any-request=
### END WingsWeb&Http

## Supported validation types, enum full path, one-to-one, otherwise reverse parsing problem;
## no `-`, `default` is a special value used when there is no match.
wings.warlock.security.auth-type-default=pro.fessional.wings.warlock.service.auth.WarlockAuthType#USERNAME
## login auth-type and enum mapping, must be one-to-one.
wings.warlock.security.auth-type.username=pro.fessional.wings.warlock.service.auth.WarlockAuthType#USERNAME
wings.warlock.security.auth-type.mobile=pro.fessional.wings.warlock.service.auth.WarlockAuthType#MOBILE
wings.warlock.security.auth-type.email=pro.fessional.wings.warlock.service.auth.WarlockAuthType#EMAIL
wings.warlock.security.auth-type.github=me.zhyd.oauth.config.AuthDefaultSource#GITHUB
wings.warlock.security.auth-type.weibo=me.zhyd.oauth.config.AuthDefaultSource#WEIBO

## Map permissions to authZone, if you have one of them, you can login,
## otherwise, it will fail with wrong username and password.
wings.warlock.security.zone-perm.admin=ROLE_ADMIN

## Map permissions to spring.application.name, if you have one of them, you can login,
## otherwise, it will fail with wrong username and password. Support AntPath, eg. `wings-*`,
## merge all matching permissions, wings default app is `wings-default`.
#wings.warlock.security.app-perm[wings-warlock]=ROLE_ADMIN

## which auth-type support Nonce auth.
wings.warlock.security.nonce-auth-type=username,mobile,email
## bean name of cache-manager, same as `wings.slardar.cache.primary`.
wings.warlock.security.nonce-cache-manager=MemoryCacheManager
## cache level, see `wings.slardar.cache.level.`
wings.warlock.security.nonce-cache-level=service

## which auth-type support to auto register new user. eg. `github,weibo`
#wings.warlock.security.autoreg-auth-type=github,weibo
## max mumber of consecutive failures for auto-registering users, and locking the account when reached.
wings.warlock.security.autoreg-max-failed=5
## credential expiration time for auto-registering users, default 3652 days (10 years)
wings.warlock.security.autoreg-expired=3652D

## Configure memory user, usually used for special user login.
## * key is the description, override if duplicate, suggest `username`+(`/`+`auth-type`)?
## * `auth-type=`, to match all auth-type.
## * For other settings, see WarlockAuthnService.Details and its defaults.
#wings.warlock.security.mem-user[root].auth-type=
#wings.warlock.security.mem-user[root].username=
#wings.warlock.security.mem-user[root].password=
#wings.warlock.security.mem-user[root].user-id=
#wings.warlock.security.mem-user[root].status= # ACTIVE by default.
#wings.warlock.security.mem-user[root].nickname= # use username by default.
#wings.warlock.security.mem-user[root].locale= # use Locale.getDefault() by default.
#wings.warlock.security.mem-user[root].zone-id= # use ZoneId.systemDefault() by default.
#wings.warlock.security.mem-user[root].passsalt= # empty by default.
#wings.warlock.security.mem-user[root].expired= # use LocalDateTime.MAX by default.

## Memory user permissions, key is the description,
## override if duplicate, suggest naming by type and usage.
#wings.warlock.security.mem-auth[boot-admin].user-id=
#wings.warlock.security.mem-auth[boot-admin].username=
#wings.warlock.security.mem-auth[boot-admin].auth-type=
#wings.warlock.security.mem-auth[boot-admin].auth-role=
#wings.warlock.security.mem-auth[boot-admin].auth-perm=
