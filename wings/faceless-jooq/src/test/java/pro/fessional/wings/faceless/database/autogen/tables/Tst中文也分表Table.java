/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.faceless.database.autogen.tables;


import org.jetbrains.annotations.NotNull;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pro.fessional.wings.faceless.convention.EmptyValue;
import pro.fessional.wings.faceless.database.autogen.DefaultSchema;
import pro.fessional.wings.faceless.database.autogen.tables.records.Tst中文也分表Record;
import pro.fessional.wings.faceless.database.jooq.WingsJournalTable;
import pro.fessional.wings.faceless.database.jooq.converter.JooqConsEnumConverter;
import pro.fessional.wings.faceless.enums.autogen.StandardLanguage;
import pro.fessional.wings.faceless.service.journal.JournalService;
import pro.fessional.wings.faceless.service.lightid.LightIdAware;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;


/**
 * The table <code>wings.tst_中文也分表</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.8",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tst中文也分表Table extends TableImpl<Tst中文也分表Record> implements WingsJournalTable<Tst中文也分表Table>, LightIdAware {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tst_中文也分表</code>
     */
    public static final Tst中文也分表Table Tst中文也分表 = new Tst中文也分表Table();
    public static final Tst中文也分表Table asY8 = Tst中文也分表.as(pro.fessional.wings.faceless.database.jooq.WingsJooqEnv.uniqueAlias());

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Tst中文也分表Record> getRecordType() {
        return Tst中文也分表Record.class;
    }

    /**
     * The column <code>tst_中文也分表.id</code>.
     */
    public final TableField<Tst中文也分表Record, Long> Id = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tst_中文也分表.create_dt</code>.
     */
    public final TableField<Tst中文也分表Record, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tst_中文也分表.modify_dt</code>.
     */
    public final TableField<Tst中文也分表Record, LocalDateTime> ModifyDt = createField(DSL.name("modify_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tst_中文也分表.delete_dt</code>.
     */
    public final TableField<Tst中文也分表Record, LocalDateTime> DeleteDt = createField(DSL.name("delete_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tst_中文也分表.commit_id</code>.
     */
    public final TableField<Tst中文也分表Record, Long> CommitId = createField(DSL.name("commit_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tst_中文也分表.login_info</code>.
     */
    public final TableField<Tst中文也分表Record, String> LoginInfo = createField(DSL.name("login_info"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>tst_中文也分表.other_info</code>.
     */
    public final TableField<Tst中文也分表Record, String> OtherInfo = createField(DSL.name("other_info"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>tst_中文也分表.language</code>.
     */
    public final TableField<Tst中文也分表Record, StandardLanguage> Language = createField(DSL.name("language"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1020111", SQLDataType.INTEGER)), this, "", new JooqConsEnumConverter(pro.fessional.wings.faceless.enums.autogen.StandardLanguage.class));

    private Tst中文也分表Table(Name alias, Table<Tst中文也分表Record> aliased) {
        this(alias, aliased, null);
    }

    private Tst中文也分表Table(Name alias, Table<Tst中文也分表Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tst_中文也分表</code> table reference
     */
    public Tst中文也分表Table(String alias) {
        this(DSL.name(alias), Tst中文也分表);
    }

    /**
     * Create an aliased <code>tst_中文也分表</code> table reference
     */
    public Tst中文也分表Table(Name alias) {
        this(alias, Tst中文也分表);
    }

    /**
     * Create a <code>tst_中文也分表</code> table reference
     */
    public Tst中文也分表Table() {
        this(DSL.name("tst_中文也分表"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Tst中文也分表Record> getPrimaryKey() {
        return Internal.createUniqueKey(Tst中文也分表Table.Tst中文也分表, DSL.name("KEY_tst_中文也分表_PRIMARY"), new TableField[] { Tst中文也分表Table.Tst中文也分表.Id }, true);
    }

    @Override
    public Tst中文也分表Table as(String alias) {
        return new Tst中文也分表Table(DSL.name(alias), this);
    }

    @Override
    public Tst中文也分表Table as(Name alias) {
        return new Tst中文也分表Table(alias, this);
    }

    @Override
    public Tst中文也分表Table as(Table<?> alias) {
        return new Tst中文也分表Table(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tst中文也分表Table rename(String name) {
        return new Tst中文也分表Table(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tst中文也分表Table rename(Name name) {
        return new Tst中文也分表Table(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tst中文也分表Table rename(Table<?> name) {
        return new Tst中文也分表Table(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDateTime, LocalDateTime, LocalDateTime, Long, String, String, StandardLanguage> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super String, ? super String, ? super StandardLanguage, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super String, ? super String, ? super StandardLanguage, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }

    /**
     * LightIdAware seqName
     */
    @Override
    @NotNull
    public String getSeqName() {
        return "tst_中文也分表";
    }


    /**
     * alias asY8
     */
    @Override
    @NotNull
    public Tst中文也分表Table getAliasTable() {
        return asY8;
    }


    /**
     * The colDel <code>delete_dt</code> condition
     */
    public final Condition DiedDataCondition = DeleteDt.gt(EmptyValue.DATE_TIME_AS_MAX);
    public final Condition LiveDataCondition = DeleteDt.lt(EmptyValue.DATE_TIME_AS_MAX);

    @Override
    @NotNull
    public Condition getOnlyDied() {
        return DiedDataCondition;
    }

    @Override
    @NotNull
    public Condition getOnlyLive() {
        return LiveDataCondition;
    }

    @Override
    @NotNull
    public Map<Field<?>, ?> markDelete(JournalService.Journal commit) {
        Map<org.jooq.Field<?>, Object> map = new HashMap<>();
        map.put(DeleteDt, commit.getCommitDt());
        map.put(CommitId, commit.getCommitId());
        return map;
    }
}
