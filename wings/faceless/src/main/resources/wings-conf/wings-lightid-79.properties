# Propagation.REQUIRES_NEW

# 不存在当前name和block的id时，是插入还是抛异常
wings.faceless.lightid.insert.auto=true
# 自动生成1000起,以下为手动生成。
wings.faceless.lightid.insert.next=1000
wings.faceless.lightid.insert.step=100

# 发生错误时处理
wings.faceless.lightid.loader.timeout=5000
wings.faceless.lightid.loader.max-error=5
wings.faceless.lightid.loader.max-count=10000
wings.faceless.lightid.loader.err-alive=120000

# blockId提供方法，默认sql
# sql - 查询数据库，唯一返回值为id
# fix - 固定数字，int
# biz - 使用自定义的业务Bean
wings.faceless.lightid.provider.block-type=sql
wings.faceless.lightid.provider.block-para=SELECT block_id FROM sys_light_sequence WHERE seq_name = 'singleton_lightid_blockid'

# jdbc template sql 类型SysLightSequence
# String seq_name, int block_id, long next_val, int step_val, String comments
wings.faceless.lightid.provider.sequence-insert=INSERT INTO sys_light_sequence (seq_name, block_id, next_val, step_val, comments) VALUES (?,?,?,?,?)
wings.faceless.lightid.provider.sequence-update=UPDATE sys_light_sequence SET next_val=? WHERE block_id=? AND seq_name=? AND next_val=?
wings.faceless.lightid.provider.sequence-get-one=SELECT next_val, step_val FROM sys_light_sequence WHERE block_id=? AND seq_name=? FOR UPDATE
wings.faceless.lightid.provider.sequence-get-all=SELECT seq_name, next_val, step_val FROM sys_light_sequence WHERE block_id=? FOR UPDATE
wings.faceless.lightid.provider.sequence-adjust=SELECT table_name, column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = DATABASE() AND UPPER(column_key) = 'PRI' AND UPPER(column_type) like '%INT%' AND table_name = ?

# lightId的布局配置，可改变默认布局
# 设置block字节数，范围[3,23]，配置项默认空。LightId默认为9，2^9=512个区
wings.faceless.lightid.layout.block-bits=
# 序列布局，是否Block先于Sequence，配置项默认空。LightId默认为true
wings.faceless.lightid.layout.block-first=

