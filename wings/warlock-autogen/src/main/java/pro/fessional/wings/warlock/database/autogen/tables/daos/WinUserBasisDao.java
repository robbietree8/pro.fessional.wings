/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoJournalImpl;
import pro.fessional.wings.warlock.database.autogen.tables.WinUserBasisTable;
import pro.fessional.wings.warlock.database.autogen.tables.pojos.WinUserBasis;
import pro.fessional.wings.warlock.database.autogen.tables.records.WinUserBasisRecord;
import pro.fessional.wings.warlock.enums.autogen.UserGender;
import pro.fessional.wings.warlock.enums.autogen.UserStatus;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.Locale;
import java.util.Optional;


/**
 * The table <code>wings.win_user_basis</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class WinUserBasisDao extends WingsJooqDaoJournalImpl<WinUserBasisTable, WinUserBasisRecord, WinUserBasis, Long> {

    /**
     * Create a new WinUserBasisDao without any configuration
     */
    public WinUserBasisDao() {
        super(WinUserBasisTable.WinUserBasis, WinUserBasis.class);
    }

    /**
     * Create a new WinUserBasisDao with an attached configuration
     */
    @Autowired
    public WinUserBasisDao(Configuration configuration) {
        super(WinUserBasisTable.WinUserBasis, WinUserBasis.class, configuration);
    }

    @Override
    public Long getId(WinUserBasis object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinUserBasis> fetchById(Long... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinUserBasis fetchOneById(Long value) {
        return fetchOne(WinUserBasisTable.WinUserBasis.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<WinUserBasis> fetchOptionalById(Long value) {
        return fetchOptional(WinUserBasisTable.WinUserBasis.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinUserBasis> fetchByCreateDt(LocalDateTime... values) {
        return fetch(WinUserBasisTable.WinUserBasis.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinUserBasis> fetchByModifyDt(LocalDateTime... values) {
        return fetch(WinUserBasisTable.WinUserBasis.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinUserBasis> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(WinUserBasisTable.WinUserBasis.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinUserBasis> fetchByCommitId(Long... values) {
        return fetch(WinUserBasisTable.WinUserBasis.CommitId, values);
    }

    /**
     * Fetch records that have <code>nickname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfNickname(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Nickname, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nickname IN (values)</code>
     */
    public List<WinUserBasis> fetchByNickname(String... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Nickname, values);
    }

    /**
     * Fetch records that have <code>passsalt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfPasssalt(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Passsalt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passsalt IN (values)</code>
     */
    public List<WinUserBasis> fetchByPasssalt(String... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Passsalt, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfGender(UserGender lowerInclusive, UserGender upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Gender, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<WinUserBasis> fetchByGender(UserGender... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Gender, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Avatar, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<WinUserBasis> fetchByAvatar(String... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Avatar, values);
    }

    /**
     * Fetch records that have <code>locale BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfLocale(Locale lowerInclusive, Locale upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Locale, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>locale IN (values)</code>
     */
    public List<WinUserBasis> fetchByLocale(Locale... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Locale, values);
    }

    /**
     * Fetch records that have <code>zoneid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfZoneid(ZoneId lowerInclusive, ZoneId upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Zoneid, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>zoneid IN (values)</code>
     */
    public List<WinUserBasis> fetchByZoneid(ZoneId... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Zoneid, values);
    }

    /**
     * Fetch records that have <code>remark BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfRemark(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Remark, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remark IN (values)</code>
     */
    public List<WinUserBasis> fetchByRemark(String... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Remark, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfStatus(UserStatus lowerInclusive, UserStatus upperInclusive) {
        return fetchRange(WinUserBasisTable.WinUserBasis.Status, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WinUserBasis> fetchByStatus(UserStatus... values) {
        return fetch(WinUserBasisTable.WinUserBasis.Status, values);
    }


    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinUserBasis> fetchByIdLive(Long... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinUserBasis fetchOneByIdLive(Long value) {
        return fetchOneLive(WinUserBasisTable.WinUserBasis.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<WinUserBasis> fetchOptionalByIdLive(Long value) {
        return fetchOptionalLive(WinUserBasisTable.WinUserBasis.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfCreateDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinUserBasis> fetchByCreateDtLive(LocalDateTime... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfModifyDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinUserBasis> fetchByModifyDtLive(LocalDateTime... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfDeleteDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinUserBasis> fetchByDeleteDtLive(LocalDateTime... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfCommitIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinUserBasis> fetchByCommitIdLive(Long... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.CommitId, values);
    }

    /**
     * Fetch records that have <code>nickname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfNicknameLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Nickname, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nickname IN (values)</code>
     */
    public List<WinUserBasis> fetchByNicknameLive(String... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Nickname, values);
    }

    /**
     * Fetch records that have <code>passsalt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfPasssaltLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Passsalt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passsalt IN (values)</code>
     */
    public List<WinUserBasis> fetchByPasssaltLive(String... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Passsalt, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfGenderLive(UserGender lowerInclusive, UserGender upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Gender, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<WinUserBasis> fetchByGenderLive(UserGender... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Gender, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfAvatarLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Avatar, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<WinUserBasis> fetchByAvatarLive(String... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Avatar, values);
    }

    /**
     * Fetch records that have <code>locale BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfLocaleLive(Locale lowerInclusive, Locale upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Locale, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>locale IN (values)</code>
     */
    public List<WinUserBasis> fetchByLocaleLive(Locale... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Locale, values);
    }

    /**
     * Fetch records that have <code>zoneid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfZoneidLive(ZoneId lowerInclusive, ZoneId upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Zoneid, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>zoneid IN (values)</code>
     */
    public List<WinUserBasis> fetchByZoneidLive(ZoneId... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Zoneid, values);
    }

    /**
     * Fetch records that have <code>remark BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfRemarkLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Remark, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remark IN (values)</code>
     */
    public List<WinUserBasis> fetchByRemarkLive(String... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Remark, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinUserBasis> fetchRangeOfStatusLive(UserStatus lowerInclusive, UserStatus upperInclusive) {
        return fetchRangeLive(WinUserBasisTable.WinUserBasis.Status, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WinUserBasis> fetchByStatusLive(UserStatus... values) {
        return fetchLive(WinUserBasisTable.WinUserBasis.Status, values);
    }
}
