/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import pro.fessional.wings.warlock.database.autogen.tables.WinConfRuntimeTable;
import pro.fessional.wings.warlock.database.autogen.tables.interfaces.IWinConfRuntime;
import pro.fessional.wings.warlock.database.autogen.tables.pojos.WinConfRuntime;

import javax.annotation.processing.Generated;


/**
 * The table <code>wings.win_conf_runtime</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WinConfRuntimeRecord extends UpdatableRecordImpl<WinConfRuntimeRecord> implements Record6<String, String, String, String, String, String>, IWinConfRuntime {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>win_conf_runtime.key</code>.
     */
    @Override
    public void setKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>win_conf_runtime.key</code>.
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>win_conf_runtime.current</code>.
     */
    @Override
    public void setCurrent(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>win_conf_runtime.current</code>.
     */
    @Override
    public String getCurrent() {
        return (String) get(1);
    }

    /**
     * Setter for <code>win_conf_runtime.previous</code>.
     */
    @Override
    public void setPrevious(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>win_conf_runtime.previous</code>.
     */
    @Override
    public String getPrevious() {
        return (String) get(2);
    }

    /**
     * Setter for <code>win_conf_runtime.initial</code>.
     */
    @Override
    public void setInitial(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>win_conf_runtime.initial</code>.
     */
    @Override
    public String getInitial() {
        return (String) get(3);
    }

    /**
     * Setter for <code>win_conf_runtime.comment</code>.
     */
    @Override
    public void setComment(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>win_conf_runtime.comment</code>.
     */
    @Override
    public String getComment() {
        return (String) get(4);
    }

    /**
     * Setter for <code>win_conf_runtime.handler</code>.
     */
    @Override
    public void setHandler(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>win_conf_runtime.handler</code>.
     */
    @Override
    public String getHandler() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<String, String, String, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return WinConfRuntimeTable.WinConfRuntime.Key;
    }

    @Override
    public Field<String> field2() {
        return WinConfRuntimeTable.WinConfRuntime.Current;
    }

    @Override
    public Field<String> field3() {
        return WinConfRuntimeTable.WinConfRuntime.Previous;
    }

    @Override
    public Field<String> field4() {
        return WinConfRuntimeTable.WinConfRuntime.Initial;
    }

    @Override
    public Field<String> field5() {
        return WinConfRuntimeTable.WinConfRuntime.Comment;
    }

    @Override
    public Field<String> field6() {
        return WinConfRuntimeTable.WinConfRuntime.Handler;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getCurrent();
    }

    @Override
    public String component3() {
        return getPrevious();
    }

    @Override
    public String component4() {
        return getInitial();
    }

    @Override
    public String component5() {
        return getComment();
    }

    @Override
    public String component6() {
        return getHandler();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getCurrent();
    }

    @Override
    public String value3() {
        return getPrevious();
    }

    @Override
    public String value4() {
        return getInitial();
    }

    @Override
    public String value5() {
        return getComment();
    }

    @Override
    public String value6() {
        return getHandler();
    }

    @Override
    public WinConfRuntimeRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public WinConfRuntimeRecord value2(String value) {
        setCurrent(value);
        return this;
    }

    @Override
    public WinConfRuntimeRecord value3(String value) {
        setPrevious(value);
        return this;
    }

    @Override
    public WinConfRuntimeRecord value4(String value) {
        setInitial(value);
        return this;
    }

    @Override
    public WinConfRuntimeRecord value5(String value) {
        setComment(value);
        return this;
    }

    @Override
    public WinConfRuntimeRecord value6(String value) {
        setHandler(value);
        return this;
    }

    @Override
    public WinConfRuntimeRecord values(String value1, String value2, String value3, String value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinConfRuntime from) {
        setKey(from.getKey());
        setCurrent(from.getCurrent());
        setPrevious(from.getPrevious());
        setInitial(from.getInitial());
        setComment(from.getComment());
        setHandler(from.getHandler());
    }

    @Override
    public <E extends IWinConfRuntime> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WinConfRuntimeRecord
     */
    public WinConfRuntimeRecord() {
        super(WinConfRuntimeTable.WinConfRuntime);
    }

    /**
     * Create a detached, initialised WinConfRuntimeRecord
     */
    public WinConfRuntimeRecord(String key, String current, String previous, String initial, String comment, String handler) {
        super(WinConfRuntimeTable.WinConfRuntime);

        setKey(key);
        setCurrent(current);
        setPrevious(previous);
        setInitial(initial);
        setComment(comment);
        setHandler(handler);
    }

    /**
     * Create a detached, initialised WinConfRuntimeRecord
     */
    public WinConfRuntimeRecord(WinConfRuntime value) {
        super(WinConfRuntimeTable.WinConfRuntime);

        if (value != null) {
            setKey(value.getKey());
            setCurrent(value.getCurrent());
            setPrevious(value.getPrevious());
            setInitial(value.getInitial());
            setComment(value.getComment());
            setHandler(value.getHandler());
        }
    }
}
