/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.faceless.app.database.autogen.tables.daos;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import pro.fessional.wings.faceless.app.database.autogen.tables.pojos.TstSharding;
import pro.fessional.wings.faceless.app.database.autogen.tables.records.TstShardingRecord;
import pro.fessional.wings.faceless.app.database.autogen.tables.TstShardingTable;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoJournalImpl;


/**
 * The table <code>wings.tst_sharding</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.14",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TstShardingDao extends WingsJooqDaoJournalImpl<TstShardingTable, TstShardingRecord, TstSharding, Long> {

    /**
     * Create a new TstShardingDao without any configuration
     */
    public TstShardingDao() {
        super(TstShardingTable.TstSharding, TstSharding.class);
    }

    /**
     * Create a new TstShardingDao with an attached configuration
     */
    @Autowired
    public TstShardingDao(Configuration configuration) {
        super(TstShardingTable.TstSharding, TstSharding.class, configuration);
    }

    @Override
    public Long getId(TstSharding object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.Id, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<TstSharding> fetchById(Long... values) {
        return fetch(TstShardingTable.TstSharding.Id, values);
    }

    public List<TstSharding> fetchById(Collection<? extends Long> values) {
        return fetch(TstShardingTable.TstSharding.Id, values);
    }


    public List<TstSharding> fetchByIdLive(Long... values) {
        return fetchLive(TstShardingTable.TstSharding.Id, values);
    }

    public List<TstSharding> fetchByIdLive(Collection<? extends Long> values) {
        return fetchLive(TstShardingTable.TstSharding.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public TstSharding fetchOneById(Long value) {
        return fetchOne(TstShardingTable.TstSharding.Id, value);
    }


    public TstSharding fetchOneByIdLive(Long value) {
        return fetchOneLive(TstShardingTable.TstSharding.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<TstSharding> fetchOptionalById(Long value) {
        return fetchOptional(TstShardingTable.TstSharding.Id, value);
    }


    public Optional<TstSharding> fetchOptionalByIdLive(Long value) {
        return fetchOptionalLive(TstShardingTable.TstSharding.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.CreateDt, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfCreateDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<TstSharding> fetchByCreateDt(LocalDateTime... values) {
        return fetch(TstShardingTable.TstSharding.CreateDt, values);
    }

    public List<TstSharding> fetchByCreateDt(Collection<? extends LocalDateTime> values) {
        return fetch(TstShardingTable.TstSharding.CreateDt, values);
    }


    public List<TstSharding> fetchByCreateDtLive(LocalDateTime... values) {
        return fetchLive(TstShardingTable.TstSharding.CreateDt, values);
    }

    public List<TstSharding> fetchByCreateDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(TstShardingTable.TstSharding.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.ModifyDt, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfModifyDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<TstSharding> fetchByModifyDt(LocalDateTime... values) {
        return fetch(TstShardingTable.TstSharding.ModifyDt, values);
    }

    public List<TstSharding> fetchByModifyDt(Collection<? extends LocalDateTime> values) {
        return fetch(TstShardingTable.TstSharding.ModifyDt, values);
    }


    public List<TstSharding> fetchByModifyDtLive(LocalDateTime... values) {
        return fetchLive(TstShardingTable.TstSharding.ModifyDt, values);
    }

    public List<TstSharding> fetchByModifyDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(TstShardingTable.TstSharding.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.DeleteDt, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfDeleteDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<TstSharding> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(TstShardingTable.TstSharding.DeleteDt, values);
    }

    public List<TstSharding> fetchByDeleteDt(Collection<? extends LocalDateTime> values) {
        return fetch(TstShardingTable.TstSharding.DeleteDt, values);
    }


    public List<TstSharding> fetchByDeleteDtLive(LocalDateTime... values) {
        return fetchLive(TstShardingTable.TstSharding.DeleteDt, values);
    }

    public List<TstSharding> fetchByDeleteDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(TstShardingTable.TstSharding.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.CommitId, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfCommitIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<TstSharding> fetchByCommitId(Long... values) {
        return fetch(TstShardingTable.TstSharding.CommitId, values);
    }

    public List<TstSharding> fetchByCommitId(Collection<? extends Long> values) {
        return fetch(TstShardingTable.TstSharding.CommitId, values);
    }


    public List<TstSharding> fetchByCommitIdLive(Long... values) {
        return fetchLive(TstShardingTable.TstSharding.CommitId, values);
    }

    public List<TstSharding> fetchByCommitIdLive(Collection<? extends Long> values) {
        return fetchLive(TstShardingTable.TstSharding.CommitId, values);
    }

    /**
     * Fetch records that have <code>login_info BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfLoginInfo(String lowerInclusive, String upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.LoginInfo, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfLoginInfoLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.LoginInfo, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_info IN (values)</code>
     */
    public List<TstSharding> fetchByLoginInfo(String... values) {
        return fetch(TstShardingTable.TstSharding.LoginInfo, values);
    }

    public List<TstSharding> fetchByLoginInfo(Collection<? extends String> values) {
        return fetch(TstShardingTable.TstSharding.LoginInfo, values);
    }


    public List<TstSharding> fetchByLoginInfoLive(String... values) {
        return fetchLive(TstShardingTable.TstSharding.LoginInfo, values);
    }

    public List<TstSharding> fetchByLoginInfoLive(Collection<? extends String> values) {
        return fetchLive(TstShardingTable.TstSharding.LoginInfo, values);
    }

    /**
     * Fetch records that have <code>other_info BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfOtherInfo(String lowerInclusive, String upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.OtherInfo, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfOtherInfoLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.OtherInfo, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>other_info IN (values)</code>
     */
    public List<TstSharding> fetchByOtherInfo(String... values) {
        return fetch(TstShardingTable.TstSharding.OtherInfo, values);
    }

    public List<TstSharding> fetchByOtherInfo(Collection<? extends String> values) {
        return fetch(TstShardingTable.TstSharding.OtherInfo, values);
    }


    public List<TstSharding> fetchByOtherInfoLive(String... values) {
        return fetchLive(TstShardingTable.TstSharding.OtherInfo, values);
    }

    public List<TstSharding> fetchByOtherInfoLive(Collection<? extends String> values) {
        return fetchLive(TstShardingTable.TstSharding.OtherInfo, values);
    }

    /**
     * Fetch records that have <code>language BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstSharding> fetchRangeOfLanguage(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TstShardingTable.TstSharding.Language, lowerInclusive, upperInclusive);
    }


    public List<TstSharding> fetchRangeOfLanguageLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(TstShardingTable.TstSharding.Language, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language IN (values)</code>
     */
    public List<TstSharding> fetchByLanguage(Integer... values) {
        return fetch(TstShardingTable.TstSharding.Language, values);
    }

    public List<TstSharding> fetchByLanguage(Collection<? extends Integer> values) {
        return fetch(TstShardingTable.TstSharding.Language, values);
    }


    public List<TstSharding> fetchByLanguageLive(Integer... values) {
        return fetchLive(TstShardingTable.TstSharding.Language, values);
    }

    public List<TstSharding> fetchByLanguageLive(Collection<? extends Integer> values) {
        return fetchLive(TstShardingTable.TstSharding.Language, values);
    }
}
