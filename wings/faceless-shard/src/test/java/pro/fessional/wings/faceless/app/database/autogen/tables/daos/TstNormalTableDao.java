/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.faceless.app.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.faceless.app.database.autogen.tables.TstNormalTableTable;
import pro.fessional.wings.faceless.app.database.autogen.tables.pojos.TstNormalTable;
import pro.fessional.wings.faceless.app.database.autogen.tables.records.TstNormalTableRecord;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoJournalImpl;
import pro.fessional.wings.silencer.spring.boot.ConditionalWingsEnabled;

import javax.annotation.processing.Generated;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;


/**
 * The table <code>wings.tst_normal_table</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
@ConditionalWingsEnabled
public class TstNormalTableDao extends WingsJooqDaoJournalImpl<TstNormalTableTable, TstNormalTableRecord, TstNormalTable, Long> {

    /**
     * Create a new TstNormalTableDao without any configuration
     */
    public TstNormalTableDao() {
        super(TstNormalTableTable.TstNormalTable, TstNormalTable.class);
    }

    /**
     * Create a new TstNormalTableDao with an attached configuration
     */
    @Autowired
    public TstNormalTableDao(Configuration configuration) {
        super(TstNormalTableTable.TstNormalTable, TstNormalTable.class, configuration);
    }

    @Override
    public Long getId(TstNormalTable object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.Id, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<TstNormalTable> fetchById(Long... values) {
        return fetch(TstNormalTableTable.TstNormalTable.Id, values);
    }

    public List<TstNormalTable> fetchById(Collection<? extends Long> values) {
        return fetch(TstNormalTableTable.TstNormalTable.Id, values);
    }


    public List<TstNormalTable> fetchByIdLive(Long... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.Id, values);
    }

    public List<TstNormalTable> fetchByIdLive(Collection<? extends Long> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public TstNormalTable fetchOneById(Long value) {
        return fetchOne(TstNormalTableTable.TstNormalTable.Id, value);
    }


    public TstNormalTable fetchOneByIdLive(Long value) {
        return fetchOneLive(TstNormalTableTable.TstNormalTable.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<TstNormalTable> fetchOptionalById(Long value) {
        return fetchOptional(TstNormalTableTable.TstNormalTable.Id, value);
    }


    public Optional<TstNormalTable> fetchOptionalByIdLive(Long value) {
        return fetchOptionalLive(TstNormalTableTable.TstNormalTable.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.CreateDt, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfCreateDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<TstNormalTable> fetchByCreateDt(LocalDateTime... values) {
        return fetch(TstNormalTableTable.TstNormalTable.CreateDt, values);
    }

    public List<TstNormalTable> fetchByCreateDt(Collection<? extends LocalDateTime> values) {
        return fetch(TstNormalTableTable.TstNormalTable.CreateDt, values);
    }


    public List<TstNormalTable> fetchByCreateDtLive(LocalDateTime... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.CreateDt, values);
    }

    public List<TstNormalTable> fetchByCreateDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ModifyDt, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfModifyDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<TstNormalTable> fetchByModifyDt(LocalDateTime... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ModifyDt, values);
    }

    public List<TstNormalTable> fetchByModifyDt(Collection<? extends LocalDateTime> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ModifyDt, values);
    }


    public List<TstNormalTable> fetchByModifyDtLive(LocalDateTime... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ModifyDt, values);
    }

    public List<TstNormalTable> fetchByModifyDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.DeleteDt, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfDeleteDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<TstNormalTable> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(TstNormalTableTable.TstNormalTable.DeleteDt, values);
    }

    public List<TstNormalTable> fetchByDeleteDt(Collection<? extends LocalDateTime> values) {
        return fetch(TstNormalTableTable.TstNormalTable.DeleteDt, values);
    }


    public List<TstNormalTable> fetchByDeleteDtLive(LocalDateTime... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.DeleteDt, values);
    }

    public List<TstNormalTable> fetchByDeleteDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.CommitId, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfCommitIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<TstNormalTable> fetchByCommitId(Long... values) {
        return fetch(TstNormalTableTable.TstNormalTable.CommitId, values);
    }

    public List<TstNormalTable> fetchByCommitId(Collection<? extends Long> values) {
        return fetch(TstNormalTableTable.TstNormalTable.CommitId, values);
    }


    public List<TstNormalTable> fetchByCommitIdLive(Long... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.CommitId, values);
    }

    public List<TstNormalTable> fetchByCommitIdLive(Collection<? extends Long> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.CommitId, values);
    }

    /**
     * Fetch records that have <code>value_varchar BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueVarchar(String lowerInclusive, String upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueVarchar, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueVarcharLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueVarchar, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_varchar IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueVarchar(String... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueVarchar, values);
    }

    public List<TstNormalTable> fetchByValueVarchar(Collection<? extends String> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueVarchar, values);
    }


    public List<TstNormalTable> fetchByValueVarcharLive(String... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueVarchar, values);
    }

    public List<TstNormalTable> fetchByValueVarcharLive(Collection<? extends String> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueVarchar, values);
    }

    /**
     * Fetch records that have <code>value_decimal BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueDecimal(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueDecimal, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueDecimalLive(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueDecimal, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_decimal IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueDecimal(BigDecimal... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueDecimal, values);
    }

    public List<TstNormalTable> fetchByValueDecimal(Collection<? extends BigDecimal> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueDecimal, values);
    }


    public List<TstNormalTable> fetchByValueDecimalLive(BigDecimal... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueDecimal, values);
    }

    public List<TstNormalTable> fetchByValueDecimalLive(Collection<? extends BigDecimal> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueDecimal, values);
    }

    /**
     * Fetch records that have <code>value_boolean BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueBoolean(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueBoolean, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueBooleanLive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueBoolean, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_boolean IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueBoolean(Boolean... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueBoolean, values);
    }

    public List<TstNormalTable> fetchByValueBoolean(Collection<? extends Boolean> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueBoolean, values);
    }


    public List<TstNormalTable> fetchByValueBooleanLive(Boolean... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueBoolean, values);
    }

    public List<TstNormalTable> fetchByValueBooleanLive(Collection<? extends Boolean> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueBoolean, values);
    }

    /**
     * Fetch records that have <code>value_int BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueInt(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueInt, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueIntLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueInt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_int IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueInt(Integer... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueInt, values);
    }

    public List<TstNormalTable> fetchByValueInt(Collection<? extends Integer> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueInt, values);
    }


    public List<TstNormalTable> fetchByValueIntLive(Integer... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueInt, values);
    }

    public List<TstNormalTable> fetchByValueIntLive(Collection<? extends Integer> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueInt, values);
    }

    /**
     * Fetch records that have <code>value_long BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueLong(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueLong, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueLongLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueLong, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_long IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueLong(Long... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueLong, values);
    }

    public List<TstNormalTable> fetchByValueLong(Collection<? extends Long> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueLong, values);
    }


    public List<TstNormalTable> fetchByValueLongLive(Long... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueLong, values);
    }

    public List<TstNormalTable> fetchByValueLongLive(Collection<? extends Long> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueLong, values);
    }

    /**
     * Fetch records that have <code>value_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueDate, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueDateLive(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueDate, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_date IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueDate(LocalDate... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueDate, values);
    }

    public List<TstNormalTable> fetchByValueDate(Collection<? extends LocalDate> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueDate, values);
    }


    public List<TstNormalTable> fetchByValueDateLive(LocalDate... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueDate, values);
    }

    public List<TstNormalTable> fetchByValueDateLive(Collection<? extends LocalDate> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueDate, values);
    }

    /**
     * Fetch records that have <code>value_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueTime, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueTimeLive(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueTime, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_time IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueTime(LocalTime... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueTime, values);
    }

    public List<TstNormalTable> fetchByValueTime(Collection<? extends LocalTime> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueTime, values);
    }


    public List<TstNormalTable> fetchByValueTimeLive(LocalTime... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueTime, values);
    }

    public List<TstNormalTable> fetchByValueTimeLive(Collection<? extends LocalTime> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueTime, values);
    }

    /**
     * Fetch records that have <code>value_lang BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TstNormalTable> fetchRangeOfValueLang(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TstNormalTableTable.TstNormalTable.ValueLang, lowerInclusive, upperInclusive);
    }


    public List<TstNormalTable> fetchRangeOfValueLangLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(TstNormalTableTable.TstNormalTable.ValueLang, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_lang IN (values)</code>
     */
    public List<TstNormalTable> fetchByValueLang(Integer... values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueLang, values);
    }

    public List<TstNormalTable> fetchByValueLang(Collection<? extends Integer> values) {
        return fetch(TstNormalTableTable.TstNormalTable.ValueLang, values);
    }


    public List<TstNormalTable> fetchByValueLangLive(Integer... values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueLang, values);
    }

    public List<TstNormalTable> fetchByValueLangLive(Collection<? extends Integer> values) {
        return fetchLive(TstNormalTableTable.TstNormalTable.ValueLang, values);
    }
}
