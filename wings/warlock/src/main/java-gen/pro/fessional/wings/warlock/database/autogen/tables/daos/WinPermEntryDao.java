/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoJournalImpl;
import pro.fessional.wings.silencer.spring.boot.ConditionalWingsEnabled;
import pro.fessional.wings.warlock.database.autogen.tables.WinPermEntryTable;
import pro.fessional.wings.warlock.database.autogen.tables.pojos.WinPermEntry;
import pro.fessional.wings.warlock.database.autogen.tables.records.WinPermEntryRecord;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;


/**
 * The table <code>wings.win_perm_entry</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
@ConditionalWingsEnabled
public class WinPermEntryDao extends WingsJooqDaoJournalImpl<WinPermEntryTable, WinPermEntryRecord, WinPermEntry, Long> {

    /**
     * Create a new WinPermEntryDao without any configuration
     */
    public WinPermEntryDao() {
        super(WinPermEntryTable.WinPermEntry, WinPermEntry.class);
    }

    /**
     * Create a new WinPermEntryDao with an attached configuration
     */
    @Autowired
    public WinPermEntryDao(Configuration configuration) {
        super(WinPermEntryTable.WinPermEntry, WinPermEntry.class, configuration);
    }

    @Override
    public Long getId(WinPermEntry object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.Id, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinPermEntry> fetchById(Long... values) {
        return fetch(WinPermEntryTable.WinPermEntry.Id, values);
    }

    public List<WinPermEntry> fetchById(Collection<? extends Long> values) {
        return fetch(WinPermEntryTable.WinPermEntry.Id, values);
    }


    public List<WinPermEntry> fetchByIdLive(Long... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Id, values);
    }

    public List<WinPermEntry> fetchByIdLive(Collection<? extends Long> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinPermEntry fetchOneById(Long value) {
        return fetchOne(WinPermEntryTable.WinPermEntry.Id, value);
    }


    public WinPermEntry fetchOneByIdLive(Long value) {
        return fetchOneLive(WinPermEntryTable.WinPermEntry.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<WinPermEntry> fetchOptionalById(Long value) {
        return fetchOptional(WinPermEntryTable.WinPermEntry.Id, value);
    }


    public Optional<WinPermEntry> fetchOptionalByIdLive(Long value) {
        return fetchOptionalLive(WinPermEntryTable.WinPermEntry.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.CreateDt, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfCreateDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinPermEntry> fetchByCreateDt(LocalDateTime... values) {
        return fetch(WinPermEntryTable.WinPermEntry.CreateDt, values);
    }

    public List<WinPermEntry> fetchByCreateDt(Collection<? extends LocalDateTime> values) {
        return fetch(WinPermEntryTable.WinPermEntry.CreateDt, values);
    }


    public List<WinPermEntry> fetchByCreateDtLive(LocalDateTime... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.CreateDt, values);
    }

    public List<WinPermEntry> fetchByCreateDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.ModifyDt, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfModifyDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinPermEntry> fetchByModifyDt(LocalDateTime... values) {
        return fetch(WinPermEntryTable.WinPermEntry.ModifyDt, values);
    }

    public List<WinPermEntry> fetchByModifyDt(Collection<? extends LocalDateTime> values) {
        return fetch(WinPermEntryTable.WinPermEntry.ModifyDt, values);
    }


    public List<WinPermEntry> fetchByModifyDtLive(LocalDateTime... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.ModifyDt, values);
    }

    public List<WinPermEntry> fetchByModifyDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.DeleteDt, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfDeleteDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinPermEntry> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(WinPermEntryTable.WinPermEntry.DeleteDt, values);
    }

    public List<WinPermEntry> fetchByDeleteDt(Collection<? extends LocalDateTime> values) {
        return fetch(WinPermEntryTable.WinPermEntry.DeleteDt, values);
    }


    public List<WinPermEntry> fetchByDeleteDtLive(LocalDateTime... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.DeleteDt, values);
    }

    public List<WinPermEntry> fetchByDeleteDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.CommitId, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfCommitIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinPermEntry> fetchByCommitId(Long... values) {
        return fetch(WinPermEntryTable.WinPermEntry.CommitId, values);
    }

    public List<WinPermEntry> fetchByCommitId(Collection<? extends Long> values) {
        return fetch(WinPermEntryTable.WinPermEntry.CommitId, values);
    }


    public List<WinPermEntry> fetchByCommitIdLive(Long... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.CommitId, values);
    }

    public List<WinPermEntry> fetchByCommitIdLive(Collection<? extends Long> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.CommitId, values);
    }

    /**
     * Fetch records that have <code>scopes BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfScopes(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.Scopes, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfScopesLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.Scopes, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scopes IN (values)</code>
     */
    public List<WinPermEntry> fetchByScopes(String... values) {
        return fetch(WinPermEntryTable.WinPermEntry.Scopes, values);
    }

    public List<WinPermEntry> fetchByScopes(Collection<? extends String> values) {
        return fetch(WinPermEntryTable.WinPermEntry.Scopes, values);
    }


    public List<WinPermEntry> fetchByScopesLive(String... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Scopes, values);
    }

    public List<WinPermEntry> fetchByScopesLive(Collection<? extends String> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Scopes, values);
    }

    /**
     * Fetch records that have <code>action BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfAction(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.Action, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfActionLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.Action, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>action IN (values)</code>
     */
    public List<WinPermEntry> fetchByAction(String... values) {
        return fetch(WinPermEntryTable.WinPermEntry.Action, values);
    }

    public List<WinPermEntry> fetchByAction(Collection<? extends String> values) {
        return fetch(WinPermEntryTable.WinPermEntry.Action, values);
    }


    public List<WinPermEntry> fetchByActionLive(String... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Action, values);
    }

    public List<WinPermEntry> fetchByActionLive(Collection<? extends String> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Action, values);
    }

    /**
     * Fetch records that have <code>remark BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinPermEntry> fetchRangeOfRemark(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinPermEntryTable.WinPermEntry.Remark, lowerInclusive, upperInclusive);
    }


    public List<WinPermEntry> fetchRangeOfRemarkLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinPermEntryTable.WinPermEntry.Remark, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remark IN (values)</code>
     */
    public List<WinPermEntry> fetchByRemark(String... values) {
        return fetch(WinPermEntryTable.WinPermEntry.Remark, values);
    }

    public List<WinPermEntry> fetchByRemark(Collection<? extends String> values) {
        return fetch(WinPermEntryTable.WinPermEntry.Remark, values);
    }


    public List<WinPermEntry> fetchByRemarkLive(String... values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Remark, values);
    }

    public List<WinPermEntry> fetchByRemarkLive(Collection<? extends String> values) {
        return fetchLive(WinPermEntryTable.WinPermEntry.Remark, values);
    }
}
