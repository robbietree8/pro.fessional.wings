/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.task.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoJournalImpl;
import pro.fessional.wings.tiny.task.database.autogen.tables.WinTaskDefineTable;
import pro.fessional.wings.tiny.task.database.autogen.tables.pojos.WinTaskDefine;
import pro.fessional.wings.tiny.task.database.autogen.tables.records.WinTaskDefineRecord;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;


/**
 * The table <code>wings.win_task_define</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class WinTaskDefineDao extends WingsJooqDaoJournalImpl<WinTaskDefineTable, WinTaskDefineRecord, WinTaskDefine, Long> {

    /**
     * Create a new WinTaskDefineDao without any configuration
     */
    public WinTaskDefineDao() {
        super(WinTaskDefineTable.WinTaskDefine, WinTaskDefine.class);
    }

    /**
     * Create a new WinTaskDefineDao with an attached configuration
     */
    @Autowired
    public WinTaskDefineDao(Configuration configuration) {
        super(WinTaskDefineTable.WinTaskDefine, WinTaskDefine.class, configuration);
    }

    @Override
    public Long getId(WinTaskDefine object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinTaskDefine> fetchById(Long... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinTaskDefine fetchOneById(Long value) {
        return fetchOne(WinTaskDefineTable.WinTaskDefine.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<WinTaskDefine> fetchOptionalById(Long value) {
        return fetchOptional(WinTaskDefineTable.WinTaskDefine.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinTaskDefine> fetchByCreateDt(LocalDateTime... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinTaskDefine> fetchByModifyDt(LocalDateTime... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinTaskDefine> fetchByCommitId(Long... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.CommitId, values);
    }

    /**
     * Fetch records that have <code>propkey BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfPropkey(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.Propkey, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>propkey IN (values)</code>
     */
    public List<WinTaskDefine> fetchByPropkey(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.Propkey, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.Enabled, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<WinTaskDefine> fetchByEnabled(Boolean... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.Enabled, values);
    }

    /**
     * Fetch records that have <code>autorun BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfAutorun(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.Autorun, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>autorun IN (values)</code>
     */
    public List<WinTaskDefine> fetchByAutorun(Boolean... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.Autorun, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.Version, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<WinTaskDefine> fetchByVersion(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.Version, values);
    }

    /**
     * Fetch records that have <code>tasker_bean BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerBean(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TaskerBean, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_bean IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerBean(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TaskerBean, values);
    }

    /**
     * Fetch records that have <code>tasker_para BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerPara(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TaskerPara, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_para IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerPara(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TaskerPara, values);
    }

    /**
     * Fetch records that have <code>tasker_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TaskerName, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_name IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerName(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TaskerName, values);
    }

    /**
     * Fetch records that have <code>tasker_fast BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerFast(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TaskerFast, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_fast IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerFast(Boolean... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TaskerFast, values);
    }

    /**
     * Fetch records that have <code>tasker_apps BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerApps(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TaskerApps, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_apps IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerApps(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TaskerApps, values);
    }

    /**
     * Fetch records that have <code>tasker_runs BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerRuns(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TaskerRuns, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_runs IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerRuns(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TaskerRuns, values);
    }

    /**
     * Fetch records that have <code>notice_bean BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNoticeBean(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.NoticeBean, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notice_bean IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNoticeBean(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.NoticeBean, values);
    }

    /**
     * Fetch records that have <code>notice_when BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNoticeWhen(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.NoticeWhen, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notice_when IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNoticeWhen(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.NoticeWhen, values);
    }

    /**
     * Fetch records that have <code>notice_conf BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNoticeConf(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.NoticeConf, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notice_conf IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNoticeConf(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.NoticeConf, values);
    }

    /**
     * Fetch records that have <code>timing_zone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingZone(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TimingZone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_zone IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingZone(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TimingZone, values);
    }

    /**
     * Fetch records that have <code>timing_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingType(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TimingType, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_type IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingType(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TimingType, values);
    }

    /**
     * Fetch records that have <code>timing_cron BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingCron(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TimingCron, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_cron IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingCron(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TimingCron, values);
    }

    /**
     * Fetch records that have <code>timing_idle BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingIdle(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TimingIdle, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_idle IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingIdle(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TimingIdle, values);
    }

    /**
     * Fetch records that have <code>timing_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingRate(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TimingRate, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_rate IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingRate(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TimingRate, values);
    }

    /**
     * Fetch records that have <code>timing_miss BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingMiss(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TimingMiss, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_miss IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingMiss(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TimingMiss, values);
    }

    /**
     * Fetch records that have <code>timing_beat BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingBeat(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.TimingBeat, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_beat IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingBeat(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.TimingBeat, values);
    }

    /**
     * Fetch records that have <code>during_from BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringFrom(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DuringFrom, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_from IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringFrom(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DuringFrom, values);
    }

    /**
     * Fetch records that have <code>during_stop BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringStop(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DuringStop, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_stop IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringStop(String... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DuringStop, values);
    }

    /**
     * Fetch records that have <code>during_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringExec(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DuringExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringExec(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DuringExec, values);
    }

    /**
     * Fetch records that have <code>during_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringFail(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DuringFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringFail(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DuringFail, values);
    }

    /**
     * Fetch records that have <code>during_done BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringDone(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DuringDone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_done IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringDone(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DuringDone, values);
    }

    /**
     * Fetch records that have <code>during_boot BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringBoot(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DuringBoot, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_boot IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringBoot(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DuringBoot, values);
    }

    /**
     * Fetch records that have <code>result_keep BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfResultKeep(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.ResultKeep, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>result_keep IN (values)</code>
     */
    public List<WinTaskDefine> fetchByResultKeep(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.ResultKeep, values);
    }

    /**
     * Fetch records that have <code>last_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfLastExec(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.LastExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchByLastExec(LocalDateTime... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.LastExec, values);
    }

    /**
     * Fetch records that have <code>last_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfLastFail(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.LastFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchByLastFail(LocalDateTime... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.LastFail, values);
    }

    /**
     * Fetch records that have <code>last_done BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfLastDone(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.LastDone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_done IN (values)</code>
     */
    public List<WinTaskDefine> fetchByLastDone(LocalDateTime... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.LastDone, values);
    }

    /**
     * Fetch records that have <code>next_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNextExec(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.NextExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNextExec(LocalDateTime... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.NextExec, values);
    }

    /**
     * Fetch records that have <code>next_lock BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNextLock(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.NextLock, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_lock IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNextLock(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.NextLock, values);
    }

    /**
     * Fetch records that have <code>dur_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDurFail(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.DurFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dur_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDurFail(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.DurFail, values);
    }

    /**
     * Fetch records that have <code>sum_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfSumExec(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.SumExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchBySumExec(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.SumExec, values);
    }

    /**
     * Fetch records that have <code>sum_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfSumFail(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.SumFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchBySumFail(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.SumFail, values);
    }

    /**
     * Fetch records that have <code>sum_done BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfSumDone(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskDefineTable.WinTaskDefine.SumDone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_done IN (values)</code>
     */
    public List<WinTaskDefine> fetchBySumDone(Integer... values) {
        return fetch(WinTaskDefineTable.WinTaskDefine.SumDone, values);
    }


    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinTaskDefine> fetchByIdLive(Long... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinTaskDefine fetchOneByIdLive(Long value) {
        return fetchOneLive(WinTaskDefineTable.WinTaskDefine.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<WinTaskDefine> fetchOptionalByIdLive(Long value) {
        return fetchOptionalLive(WinTaskDefineTable.WinTaskDefine.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfCreateDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinTaskDefine> fetchByCreateDtLive(LocalDateTime... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfModifyDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinTaskDefine> fetchByModifyDtLive(LocalDateTime... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDeleteDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDeleteDtLive(LocalDateTime... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfCommitIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinTaskDefine> fetchByCommitIdLive(Long... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.CommitId, values);
    }

    /**
     * Fetch records that have <code>propkey BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfPropkeyLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.Propkey, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>propkey IN (values)</code>
     */
    public List<WinTaskDefine> fetchByPropkeyLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.Propkey, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfEnabledLive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.Enabled, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<WinTaskDefine> fetchByEnabledLive(Boolean... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.Enabled, values);
    }

    /**
     * Fetch records that have <code>autorun BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfAutorunLive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.Autorun, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>autorun IN (values)</code>
     */
    public List<WinTaskDefine> fetchByAutorunLive(Boolean... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.Autorun, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfVersionLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.Version, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<WinTaskDefine> fetchByVersionLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.Version, values);
    }

    /**
     * Fetch records that have <code>tasker_bean BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerBeanLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TaskerBean, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_bean IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerBeanLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TaskerBean, values);
    }

    /**
     * Fetch records that have <code>tasker_para BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerParaLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TaskerPara, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_para IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerParaLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TaskerPara, values);
    }

    /**
     * Fetch records that have <code>tasker_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerNameLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TaskerName, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_name IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerNameLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TaskerName, values);
    }

    /**
     * Fetch records that have <code>tasker_fast BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerFastLive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TaskerFast, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_fast IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerFastLive(Boolean... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TaskerFast, values);
    }

    /**
     * Fetch records that have <code>tasker_apps BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerAppsLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TaskerApps, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_apps IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerAppsLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TaskerApps, values);
    }

    /**
     * Fetch records that have <code>tasker_runs BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTaskerRunsLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TaskerRuns, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tasker_runs IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTaskerRunsLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TaskerRuns, values);
    }

    /**
     * Fetch records that have <code>notice_bean BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNoticeBeanLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.NoticeBean, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notice_bean IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNoticeBeanLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.NoticeBean, values);
    }

    /**
     * Fetch records that have <code>notice_when BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNoticeWhenLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.NoticeWhen, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notice_when IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNoticeWhenLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.NoticeWhen, values);
    }

    /**
     * Fetch records that have <code>notice_conf BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNoticeConfLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.NoticeConf, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notice_conf IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNoticeConfLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.NoticeConf, values);
    }

    /**
     * Fetch records that have <code>timing_zone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingZoneLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TimingZone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_zone IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingZoneLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TimingZone, values);
    }

    /**
     * Fetch records that have <code>timing_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingTypeLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TimingType, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_type IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingTypeLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TimingType, values);
    }

    /**
     * Fetch records that have <code>timing_cron BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingCronLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TimingCron, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_cron IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingCronLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TimingCron, values);
    }

    /**
     * Fetch records that have <code>timing_idle BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingIdleLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TimingIdle, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_idle IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingIdleLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TimingIdle, values);
    }

    /**
     * Fetch records that have <code>timing_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingRateLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TimingRate, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_rate IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingRateLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TimingRate, values);
    }

    /**
     * Fetch records that have <code>timing_miss BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingMissLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TimingMiss, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_miss IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingMissLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TimingMiss, values);
    }

    /**
     * Fetch records that have <code>timing_beat BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfTimingBeatLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.TimingBeat, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timing_beat IN (values)</code>
     */
    public List<WinTaskDefine> fetchByTimingBeatLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.TimingBeat, values);
    }

    /**
     * Fetch records that have <code>during_from BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringFromLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DuringFrom, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_from IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringFromLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DuringFrom, values);
    }

    /**
     * Fetch records that have <code>during_stop BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringStopLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DuringStop, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_stop IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringStopLive(String... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DuringStop, values);
    }

    /**
     * Fetch records that have <code>during_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringExecLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DuringExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringExecLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DuringExec, values);
    }

    /**
     * Fetch records that have <code>during_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringFailLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DuringFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringFailLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DuringFail, values);
    }

    /**
     * Fetch records that have <code>during_done BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringDoneLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DuringDone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_done IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringDoneLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DuringDone, values);
    }

    /**
     * Fetch records that have <code>during_boot BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDuringBootLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DuringBoot, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>during_boot IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDuringBootLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DuringBoot, values);
    }

    /**
     * Fetch records that have <code>result_keep BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfResultKeepLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.ResultKeep, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>result_keep IN (values)</code>
     */
    public List<WinTaskDefine> fetchByResultKeepLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.ResultKeep, values);
    }

    /**
     * Fetch records that have <code>last_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfLastExecLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.LastExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchByLastExecLive(LocalDateTime... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.LastExec, values);
    }

    /**
     * Fetch records that have <code>last_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfLastFailLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.LastFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchByLastFailLive(LocalDateTime... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.LastFail, values);
    }

    /**
     * Fetch records that have <code>last_done BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfLastDoneLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.LastDone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_done IN (values)</code>
     */
    public List<WinTaskDefine> fetchByLastDoneLive(LocalDateTime... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.LastDone, values);
    }

    /**
     * Fetch records that have <code>next_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNextExecLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.NextExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNextExecLive(LocalDateTime... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.NextExec, values);
    }

    /**
     * Fetch records that have <code>next_lock BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfNextLockLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.NextLock, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_lock IN (values)</code>
     */
    public List<WinTaskDefine> fetchByNextLockLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.NextLock, values);
    }

    /**
     * Fetch records that have <code>dur_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfDurFailLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.DurFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dur_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchByDurFailLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.DurFail, values);
    }

    /**
     * Fetch records that have <code>sum_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfSumExecLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.SumExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_exec IN (values)</code>
     */
    public List<WinTaskDefine> fetchBySumExecLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.SumExec, values);
    }

    /**
     * Fetch records that have <code>sum_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfSumFailLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.SumFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_fail IN (values)</code>
     */
    public List<WinTaskDefine> fetchBySumFailLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.SumFail, values);
    }

    /**
     * Fetch records that have <code>sum_done BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskDefine> fetchRangeOfSumDoneLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinTaskDefineTable.WinTaskDefine.SumDone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_done IN (values)</code>
     */
    public List<WinTaskDefine> fetchBySumDoneLive(Integer... values) {
        return fetchLive(WinTaskDefineTable.WinTaskDefine.SumDone, values);
    }
}
